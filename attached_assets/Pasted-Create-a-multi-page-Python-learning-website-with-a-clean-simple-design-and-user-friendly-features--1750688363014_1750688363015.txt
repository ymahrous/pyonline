Create a multi-page Python learning website with a clean, simple design and user-friendly features. This website should be structured with the following:
General Structure:
* HTML: Separate HTML files for each page (using index.html, lesson.html, etc.)
* CSS: Global stylesheets to keep the design consistent
* JavaScript: For interactivity (e.g., progress bar, meme display, lesson completion tracking)
* Use vanilla JavaScript or lightweight libraries like jQuery for simple functionality (no heavy frameworks needed).
1. Navigation (Global Navbar):
* A global navigation bar present on all pages with links:
    * Home
    * Lessons
    * Projects
    * About
    * Contact
* Ensure the navbar is sticky and mobile-responsive.
2. Home Page (index.html):
* Hero section with a welcoming tagline: “Learn Python from Scratch: Fun, Simple, Interactive!”
* A brief introduction to the platform (2–3 sentences).
* Prominent Call to Action (CTA) button: "Start Learning" which directs to the Lessons page.
* A fun meme section (use placeholder images or humorous Python-related memes).
* Footer with social media links and copyright information.
3. Lessons Page (lessons.html):
* A list of Python topics displayed in a grid or list format:
    * Introduction to Python
    * Variables and Data Types
    * Control Flow (if, for, while)
    * Functions and Methods
    * Lists, Tuples, and Dictionaries
    * Error Handling
    * Libraries & Modules
    * Basic Projects
* Each lesson should have:
    * Title
    * Short description (1-2 sentences)
    * A “Start Lesson” button linking to the respective lesson page.
    * Use a fun icon or image to represent each lesson (e.g., a Python logo, code blocks, etc.).
4. Individual Lesson Pages (lesson_variables.html, lesson_functions.html, etc.):
* Page Structure for each lesson:
    * A brief, beginner-friendly overview of the topic (1–2 paragraphs)
    * Code Examples with syntax highlighting (use the pre tag or a simple JS library for highlighting).
    * Interactive Python Code Editor embedded (use Skulpt or Pyodide to run Python code directly in the browser).
    * Progress Bar to track how far the user has come in the lesson.
        * The progress bar should show a percentage based on how much content the user has completed (e.g., after code examples, a button to mark the lesson as "complete").
    * Funny Meme:
        * After completing the lesson, display a random meme related to Python or programming (e.g., "Python Is Easy" meme, or a meme like “I came. I coded. I conquered.”)
        * The meme should show up in a modal or a section that appears when the user clicks the "Complete Lesson" button.
        * Use placeholder image URLs or funny Python memes for this.
    * A Next Lesson button that guides users to the next topic.
    * A Sidebar with related resources (optional).
5. Projects Page (projects.html):
* A list of fun beginner Python projects with descriptions and links to GitHub repos or code templates:
    * Calculator App
    * To-Do List (CLI or GUI)
    * Guess the Number Game
    * Simple Web Scraper
* For each project, include:
    * Short intro and goal of the project
    * Step-by-step instructions (keep it simple)
    * Example code snippets
* Links to GitHub or live demos (placeholders for now).
6. About Page (about.html):
* A short introduction about the platform and the mission of helping people learn Python easily and interactively.
* An optional "About the Creator" section with information about who built the site (can be placeholder text).
7. Contact Page (contact.html):
* Simple contact form:
    * Name
    * Email
    * Message
    * Submit button (no backend required, just form UI).
* Footer with social media links and copyright text.
8. Design Guidelines:
* Clean, modern design with a focus on readability and accessibility.
* Responsive design for mobile and tablet (use Flexbox or Grid).
* Use light, friendly colors (e.g., soft blues, whites, and light grays).
* Easy-to-read typography like Open Sans, Roboto, or Inter.
* For memes, use fun, humorous visuals that will keep learners engaged and smiling.
* Add icons or illustrations for each lesson (could be Python logos, code icons, etc.).
9. Interactive Features:
* Progress Bar that updates as users go through lessons.
* Funny Meme that shows after lesson completion (you can use online meme generators or images).
* Ability for users to mark lessons as completed, which will update the progress bar.
File Structure:
* index.html (Home page)
* lessons.html (List of lessons)
* lesson_pages/ (Folder containing individual lesson pages like lesson_variables.html, lesson_functions.html, etc.)
* projects.html (Projects page)
* about.html (About page)
* contact.html (Contact page)
* css/ (Folder for stylesheets)
* js/ (Folder for JavaScript)
* images/ (Folder for images like memes, lesson icons)